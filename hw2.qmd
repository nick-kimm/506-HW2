---
title: "hw2"
author: "Nick Kim"
format:
  html:
    embed-resources: true
---

Link to my GitHub: <https://github.com/nick-kimm/506-HW2>.

## Problem 1: Dice Game

Letâ€™s play a dice game. It costs $2 to play. You roll a single 6-sided die.

-On a roll of 3 or 5, you win twice your roll.
-On any other roll, you lose.

The input and output should be:

Input: The number of dice to roll.
Output: Total winnings

#Part a:
#Version 1: Loop
```{r}
#' Version 1 Dice Game
#'Will implement the Dice Game using a for loop. Will check each index in the simulated rolls and will check if that number if either a 3 or a 5. If it is then it'll increase the total winnings by 2 as that is the next profit from that roll. If it neither then it'll subtract 2 from the winnings as that is the cost of this situation. 
#'
#' @param x (number of rolls)
#'
#' @return Total Winnings a/f x number of rolls
play_dice <- function(x){
  rolls <- sample(1:6,x,replace=TRUE)
  winnings <- 0
  for (i in 1:x){
    if (rolls[i]==3 | rolls[i]==5){
      winnings <- winnings + 2
    }
    else{
      winnings <- winnings - 2
    }
  }
  return(winnings)
}
```

#Version 2: Vectorized functions in R
```{r}
#' Version 2 Dice Game
#'Samples the random roll for x number of rolls. Next will calculate the winnings by checking if the roll isn't a 3 or a 5 and then multiplying it by -2 as you'll lose that much in this game. Then it'll add it to the rolls that are 3 or a 5 by 4 as you would double the amount you put in ($2). Finally sum over this whole vector to get your total winnings after x rolls
#' @param x 
#'
#' @return Total winnings 
#'
#' @examples rolls <- 2 5 2 6 4 2 1 3 5 6
#' winnings <- sum(-2 0 -2 -2 -2 -2 -2 0 0 -2 (1st conditionals) + 0 4 0 0 0 0 0 4 4 0 (2nd conditional))
#' winnings <- sum(-2 4 -2 -2 -2 -2 -2 4 4 -2)
#' winnings <- -2 
play_dice2 <- function(x){
  rolls <- sample(1:6,x,replace=TRUE)
  winnings <- sum((rolls!=3 & rolls!=5)*-2+(rolls==3 | rolls==5)*4)
  return(winnings)
}
```

#Version 3: Table approach
```{r}
#' Version 3 Dice Game
#'It'll first convert the rolls to a table with the values 1 to 6 in the first row followed by the count of each of these rolls in the 2nd row. Then the total winnings is calculated by rolls of 3 or 5 multiplied by 4 subtracted by other rolls multiplied by 2. 
#' @param x 
#'
#' @return Total winnings 
#'
#' @examples rolls <- 4 5 6 1 3 
#' 
#' roll_t <- 1 2 3 4 5 6
#'           1 0 1 1 1 1
#'
#'output <- (0+1)*4- (1+1+1+1)*2
#'.      <- -4
play_dice3 <- function(x){
  rolls <- sample(1:6,x,replace=TRUE)
  roll_t<-table(factor(rolls, levels = 1:6))
  return((roll_t[["3"]]+roll_t[["5"]])*4-(roll_t[["1"]]+roll_t[["2"]]+roll_t[["4"]]+roll_t[["6"]])*2)
}
```

#Version 4: Apply function
```{r}
#' Version 4 Dice Game
#'Will create a matrix that will replace any value of a 3 or a 5 to be 4 and anything else to -2 as that would be how much you would profit or loose in playing this game. Then we'll use the apply function to sum over all these values down the column to get our total winnings.
#' @param x 
#'
#' @return Total winnings
#'
#' @examples rolls <- 6 4 6 3 
#' profit <- [-2 -2 -2 4]^T
#' output <- -2
play_dice4 <- function(x){
  rolls <- sample(1:6,x,replace=TRUE)
  profit <- matrix(ifelse((rolls==3|rolls==5),4,-2))
  return(apply(profit,2,sum))
}
```

#Part b: 

```{r}
#Version 1 test:
c(play_dice(3),play_dice(3000))

#Version 2 test:
c(play_dice2(3),play_dice2(3000))

#Version 3 test:
c(play_dice3(3),play_dice3(3000))

#Version 4 test:
c(play_dice4(3),play_dice4(3000))
```
#Part c:
First need to edit the functions above to account for a set seed
```{r}
seed=0

play_dice_seed <- function(x,seed){
  set.seed(seed)
  rolls <- sample(1:6,x,replace=TRUE)
  winnings <- 0
  for (i in 1:x){
    if (rolls[i]==3 | rolls[i]==5){
      winnings <- winnings + 2
    }
    else{
      winnings <- winnings - 2
    }
  }
  return(winnings)
}

play_dice2_seed <- function(x,seed){
  set.seed(seed)
  rolls <- sample(1:6,x,replace=TRUE)
  winnings <- sum((rolls!=3 & rolls!=5)*-2+(rolls==3 | rolls==5)*4)
  return(winnings)
}

play_dice3_seed <- function(x,seed){
  set.seed(seed)
  rolls <- sample(1:6,x,replace=TRUE)
  roll_t<-table(factor(rolls, levels = 1:6))
  return((roll_t[["3"]]+roll_t[["5"]])*4-(roll_t[["1"]]+roll_t[["2"]]+roll_t[["4"]]+roll_t[["6"]])*2)
}

play_dice4_seed <- function(x,seed){
  set.seed(seed)
  rolls <- sample(1:6,x,replace=TRUE)
  profit <- matrix(ifelse((rolls==3|rolls==5),4,-2))
  return(apply(profit,2,sum))
}
```

```{r}
set.seed(0)
rolls <- sample(1:6,4,replace=TRUE)
roll_t<-table(factor(rolls, levels = 1:6))
roll_t[["1"]]
```
